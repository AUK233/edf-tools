//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer xgl_system
// {
//
//   float4x4 g_xgl_view;               // Offset:    0 Size:    64 [unused]
//   float4x4 g_xgl_view_inverse;       // Offset:   64 Size:    64 [unused]
//   float4x4 g_xgl_projection;         // Offset:  128 Size:    64 [unused]
//   float4x4 g_xgl_view_projection;    // Offset:  192 Size:    64 [unused]
//   float4x4 g_xgl_view_projection_inverse;// Offset:  256 Size:    64 [unused]
//   uint2 g_xgl_target_dimension;      // Offset:  320 Size:     8 [unused]
//   float g_xgl_time;                  // Offset:  328 Size:     4 [unused]
//      = 0x00000000 
//   int g_xgl_id;                      // Offset:  332 Size:     4
//      = 0x00000000 
//   float3 g_xgl_light_vector0;        // Offset:  336 Size:    12 [unused]
//      = 0x3f333333 0xbf333333 0xbf333333 
//   float3 g_xgl_light_color0;         // Offset:  352 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 g_xgl_light_specular_color0;// Offset:  368 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 g_xgl_light_vector1;        // Offset:  384 Size:    12 [unused]
//      = 0xbf333333 0x3f333333 0x3f333333 
//   float3 g_xgl_light_color1;         // Offset:  400 Size:    12 [unused]
//      = 0x3e4ccccd 0x3e4ccccd 0x3e4ccccd 
//   float3 g_xgl_light_specular_color1;// Offset:  416 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 g_xgl_light_vector2;        // Offset:  432 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 g_xgl_light_color2;         // Offset:  448 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 g_xgl_light_specular_color2;// Offset:  464 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 g_xgl_light_vector3;        // Offset:  480 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 g_xgl_light_color3;         // Offset:  496 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 g_xgl_light_specular_color3;// Offset:  512 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 g_xgl_ambient_color;        // Offset:  528 Size:    12 [unused]
//      = 0x3e4ccccd 0x3e4ccccd 0x3e4ccccd 
//   float g_pad2;                      // Offset:  540 Size:     4 [unused]
//   float g_xgl_fog_mul;               // Offset:  544 Size:     4 [unused]
//   float g_xgl_fog_add;               // Offset:  548 Size:     4 [unused]
//   float g_xgl_fog_curve;             // Offset:  552 Size:     4 [unused]
//   float g_xgl_brightness_fog_mul;    // Offset:  556 Size:     4 [unused]
//   float g_xgl_brightness_fog_add;    // Offset:  560 Size:     4 [unused]
//   float g_xgl_brightness_fog_curve;  // Offset:  564 Size:     4 [unused]
//   float g_xgl_fade_mul;              // Offset:  568 Size:     4 [unused]
//   float g_xgl_fade_add;              // Offset:  572 Size:     4 [unused]
//   float4 g_xgl_fog_color;            // Offset:  576 Size:    16 [unused]
//   float4 g_xgl_brightness_fog_color; // Offset:  592 Size:    16 [unused]
//
// }
//
// cbuffer xgl_user_param
// {
//
//   float3 diffuse;                    // Offset:    0 Size:    12
//      = 0x3f000000 0x3f000000 0x3f000000 
//   float3 specular_color;             // Offset:   16 Size:    12
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float specular_diffuse_blend;      // Offset:   28 Size:     4
//      = 0x3f000000 
//   float3 light_color;                // Offset:   32 Size:    12
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float normal_amount;               // Offset:   44 Size:     4
//      = 0x3f800000 
//   float metallic;                    // Offset:   48 Size:     4
//      = 0x3f800000 
//   float roughness;                   // Offset:   52 Size:     4
//      = 0x3f800000 
//   float damage_test;                 // Offset:   56 Size:     4 [unused]
//      = 0x00000000 
//   float2 damage_uv_mul;              // Offset:   64 Size:     8
//      = 0x41200000 0x41200000 
//   float2 damage_mask_uv_mul;         // Offset:   72 Size:     8
//      = 0x41200000 0x41200000 
//   float damage_normal_amount;        // Offset:   80 Size:     4
//      = 0x3f800000 
//   float3 damage_specular_color;      // Offset:   84 Size:    12
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 damage_edge_color;          // Offset:   96 Size:    12
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 damage_max_color;           // Offset:  112 Size:    12
//      = 0x3e4ccccd 0x3dcccccd 0x3dcccccd 
//   float damage_metallic;             // Offset:  124 Size:     4
//      = 0x00000000 
//   float damage_roughness;            // Offset:  128 Size:     4
//      = 0x00000000 
//   float damage_light_mask;           // Offset:  132 Size:     4
//      = 0x00000000 
//   
//   struct DamageMapParam
//   {
//       
//       float3 m_org;                  // Offset:  144
//       uint m_line_pitch;             // Offset:  156
//       float3 m_inv_grid_size;        // Offset:  160
//       uint m_slice_pitch;            // Offset:  172
//
//   } sys_damage_map_param;            // Offset:  144 Size:    32
//
// }
//
// Resource bind info for sys_damage_map
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// albedo_sampler                    sampler      NA          NA             s0      1 
// normal_sampler                    sampler      NA          NA             s1      1 
// param_r_m_occ_light_sampler       sampler      NA          NA             s2      1 
// damage_dist_sampler               sampler      NA          NA             s3      1 
// damage_diffuse_sampler            sampler      NA          NA             s4      1 
// damage_normal_sampler             sampler      NA          NA             s5      1 
// albedo                            texture  float4          2d             t0      1 
// normal                            texture  float4          2d             t1      1 
// param_r_m_occ_light               texture  float4          2d             t2      1 
// damage_dist                       texture  float4          2d             t3      1 
// damage_diffuse                    texture  float4          2d             t4      1 
// damage_normal                     texture  float4          2d             t5      1 
// sys_damage_map                    texture  struct         r/o             t6      1 
// xgl_system                        cbuffer      NA          NA            cb0      1 
// xgl_user_param                    cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// EYE_VECTOR               0   xyz         1     NONE   float       
// VIEW_POSITION            0   xyz         2     NONE   float   xyz 
// LOCAL_POSITION           0   xyz         3     NONE   float   xyz 
// NORMAL                   0   xyz         4     NONE   float   xyz 
// BINORMAL                 0   xyz         5     NONE   float   xyz 
// TANGENT                  0   xyz         6     NONE   float   xyz 
// TEXCOORD                 0   xy          7     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyzw
// SV_TARGET                6   xyzw        6   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[21], immediateIndexed
dcl_constantbuffer CB2[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_structured t6, 4
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o6.xyzw
dcl_temps 12
dp3 r0.x, v4.xyzx, v4.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v4.xyzx
dp3 r0.w, v5.xyzx, v5.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v5.xyzx
dp3 r0.w, v6.xyzx, v6.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v6.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v7.xyxx, t2.wxyz, s2
mov_sat r3.x, r3.x
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v7.xyxx, t0.xyzw, s0
mul r4.xyz, r4.xyzx, cb2[0].xyzx
mul r3.yz, r3.zzyz, cb2[3].xxyx
mul r0.w, r3.y, cb2[1].w
mad r5.xyz, r4.xyzx, cb2[1].xyzx, -cb2[1].xyzx
mad r5.xyz, r0.wwww, r5.xyzx, cb2[1].xyzx
add r0.w, -r3.x, l(1.000000)
mul r5.xyz, r0.wwww, r5.xyzx
add r6.xyz, v3.xyzx, -cb2[9].xyzx
mul r6.xyz, r6.xyzx, cb2[10].xyzx
frc r7.xyz, r6.xyzx
ftoi r6.xyz, r6.xyzx
iadd r8.xy, r6.xyxx, l(1, 1, 0, 0)
mov r6.w, r8.y
mov r8.z, r6.x
imad r9.xyzw, r6.yyww, cb2[9].wwww, r8.zxzx
imad r9.xyzw, r6.zzzz, cb2[10].wwww, r9.xyzw
ushr r10.xyzw, r9.xyzw, l(4, 4, 4, 4)
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.x, r10.x, l(0), t6.xxxx
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.y, r10.y, l(0), t6.xxxx
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.z, r10.z, l(0), t6.xxxx
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r10.w, l(0), t6.xxxx
bfi r9.xyzw, l(4, 4, 4, 4), l(1, 1, 1, 1), r9.xyzw, l(0, 0, 0, 0)
ushr r9.xyzw, r11.xyzw, r9.xyzw
and r9.xyzw, r9.xyzw, l(3, 3, 3, 3)
utof r9.xyzw, r9.xyzw
mul r9.xyzw, r9.xyzw, l(0.333333, 0.333333, 0.333333, 0.333333)
iadd r6.xyz, r6.xyzx, l(0, 0, 1, 0)
mov r8.w, r6.x
imad r8.xyzw, r6.yyww, cb2[9].wwww, r8.wxwx
imad r6.xyzw, r6.zzzz, cb2[10].wwww, r8.xyzw
ushr r8.xyzw, r6.xyzw, l(4, 4, 4, 4)
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.x, r8.x, l(0), t6.xxxx
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.y, r8.y, l(0), t6.xxxx
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.z, r8.z, l(0), t6.xxxx
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r8.w, l(0), t6.xxxx
bfi r6.xyzw, l(4, 4, 4, 4), l(1, 1, 1, 1), r6.xyzw, l(0, 0, 0, 0)
ushr r6.xyzw, r10.xyzw, r6.xyzw
and r6.xyzw, r6.xyzw, l(3, 3, 3, 3)
utof r6.xyzw, r6.xyzw
mad r6.xyzw, r6.xyzw, l(0.333333, 0.333333, 0.333333, 0.333333), -r9.xyzw
mad r6.xyzw, r7.zzzz, r6.xyzw, r9.xyzw
add r6.zw, -r6.xxxy, r6.zzzw
mad r6.xy, r7.yyyy, r6.zwzz, r6.xyxx
add r1.w, -r6.x, r6.y
mad r1.w, r7.x, r1.w, r6.x
mul r6.xy, v7.xyxx, cb2[4].zwzz
sample_indexable(texture2d)(float,float,float,float) r2.w, r6.xyxx, t3.yzwx, s3
add r1.w, r1.w, -r2.w
mad r1.w, -r3.x, cb2[8].y, r1.w
lt r2.w, l(0.000000), r1.w
if_nz r2.w
  mul r6.xy, v7.xyxx, cb2[4].xyxx
  sample_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t5.xywz, s5
  mul r7.x, r7.z, r7.x
  add r6.zw, r7.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
  add r6.zw, r6.zzzw, r6.zzzw
  dp2 r2.w, r6.zwzz, r6.zwzz
  add r2.w, -r2.w, l(1.000000)
  max r2.w, r2.w, l(0.000010)
  sqrt r2.w, r2.w
  mul r6.zw, r6.zzzw, cb2[5].xxxx
  mul r7.xyz, r1.xyzx, r6.wwww
  mad r7.xyz, r6.zzzz, r2.xyzx, r7.xyzx
  mad r7.xyz, r2.wwww, r0.xyzx, r7.xyzx
  dp3 r2.w, r7.xyzx, r7.xyzx
  rsq r2.w, r2.w
  mul r7.xyz, r2.wwww, r7.xyzx
  sample_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t4.xyzw, s4
  mov_sat r2.w, r1.w
  add r8.xyz, -r6.xyzx, cb2[7].xyzx
  mad r6.xyz, r2.wwww, r8.xyzx, r6.xyzx
  lt r1.w, r1.w, l(0.100000)
  movc r6.xyz, r1.wwww, cb2[6].xyzx, r6.xyzx
  movc r5.xyz, r1.wwww, r5.xyzx, cb2[5].yzwy
  movc r3.y, r1.w, r3.y, cb2[7].w
  movc r3.z, r1.w, r3.z, cb2[8].x
  mov r8.xyz, l(0,0,0,0)
else 
  sample_indexable(texture2d)(float,float,float,float) r9.xyz, v7.xyxx, t1.xywz, s1
  mul r9.x, r9.z, r9.x
  add r9.xy, r9.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
  add r9.xy, r9.xyxx, r9.xyxx
  dp2 r1.w, r9.xyxx, r9.xyxx
  add r1.w, -r1.w, l(1.000000)
  max r1.w, r1.w, l(0.000010)
  sqrt r1.w, r1.w
  mul r9.xy, r9.xyxx, cb2[2].wwww
  mul r1.xyz, r1.xyzx, r9.yyyy
  mad r1.xyz, r9.xxxx, r2.xyzx, r1.xyzx
  mad r0.xyz, r1.wwww, r0.xyzx, r1.xyzx
  dp3 r1.x, r0.xyzx, r0.xyzx
  rsq r1.x, r1.x
  mul r7.xyz, r0.xyzx, r1.xxxx
  mul r0.xyz, r4.xyzx, cb2[2].xyzx
  mul r8.xyz, r3.xxxx, r0.xyzx
  mul r6.xyz, r0.wwww, r4.xyzx
endif 
mul o2.xyz, r3.wwww, r7.xyzx
itof o4.w, cb0[20].w
mov o0.xyz, r6.xyzx
mov o0.w, l(1.000000)
mov o1.xyz, r5.xyzx
mov o1.w, l(1.000000)
mov o2.w, l(1.000000)
mov o3.xy, r3.yzyy
mov o3.zw, l(0,0,0,1.000000)
mov o4.xyz, v2.xyzx
mov o6.xyz, r8.xyzx
mov o6.w, l(1.000000)
ret 
// Approximately 122 instruction slots used
 